package main;

public class lambda {
		   public static void main(String args[]) {
		      lambda tester = new lambda();
				
		      //with type declaration
		      MathOperation addition = (int a, int b) -> a + b;
				
		      //with out type declaration
		      MathOperation subtraction = (a, b) -> a - b;
				
		      //with return statement along with curly braces
		      MathOperation multiplication = (int a, int b) -> { return a * b; };
				
		      //without return statement and without curly braces
		      MathOperation division = (int a, int b) -> a / b;
				
		      System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
		      System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
		      System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
		      System.out.println("10 / 5 = " + tester.operate(10, 5, division));
				
		      //without parenthesis
		      Greeting greet1 = message ->
		      System.out.println("Hello " + message);
				
		      //with parenthesis
		      Greeting greet2 = (message) ->
		      System.out.println("Hello " + message);
				
		      greet1.sayMessage("ALex");
		      greet2.sayMessage("Adam");
		   }
			@FunctionalInterface
		   interface MathOperation {
		      int operation(int a, int b);
		   }
			@FunctionalInterface
		   interface Greeting {
		      void sayMessage(String message);
		   }
			
		   private int operate(int a, int b, MathOperation mathOperation) {
		      return mathOperation.operation(a, b);
		   }
		}



